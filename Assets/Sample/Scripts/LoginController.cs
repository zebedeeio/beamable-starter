using System;
using System.Collections;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using System.Web;
using Beamable;
using Beamable.Api.Autogenerated.Models;
using Beamable.Server.Clients;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using TMPro;
using UnityEngine;
using ZebedeeAPI;

public class LoginController : MonoBehaviour
{
    
    public static LoginController Instance { get; private set; }
    
    [SerializeField] private string apiLoginBaseEndpoint = "https://api.zebedee.io/";
    [SerializeField] private string clientID = "YOUR_CLIENT_ID";
    [SerializeField] private string redirectURL = "";
    [SerializeField] private string responseType = "code";

    [SerializeField] private TextMeshProUGUI responseText;
    
    public string deeplinkURL;

    private void Awake()
    {
        if (Instance == null)
        {
            responseText.text = "Awake";
            Instance = this;                
            Application.deepLinkActivated += onDeepLinkActivated;
            if (!string.IsNullOrEmpty(Application.absoluteURL))
            {
                responseText.text = "Cold Start: " + Application.absoluteURL;
                // Cold start and Application.absoluteURL not null so process Deep Link.
                onDeepLinkActivated(Application.absoluteURL);
            }
            // Initialize DeepLink Manager global variable.
            else deeplinkURL = "[none]";
            DontDestroyOnLoad(gameObject);
        }
        else
        {
            Destroy(gameObject);
        }
    }

    private void Start()
    {
        throw new NotImplementedException();
    }

    private void onDeepLinkActivated(string absoluteURL)
    {
        responseText.text = "Deep Link: " + absoluteURL;
        
        deeplinkURL = absoluteURL;
        
        ContinueLogin(deeplinkURL);
    }

    public void Login()
    {
        var pkce = ZebedeeUtils.GeneratePKCE();
        
        string state = Guid.NewGuid().ToString();
        string redirect = WebUtility.UrlEncode(this.redirectURL);
        
        PlayerPrefs.SetString("verifier", pkce["verifier"]);
        PlayerPrefs.SetString("state", state);
        
        // JToken  blogPosts = JArray.Parse(json);
        // JToken  blogPost = blogPosts[0];
        //string title = blogPost.Value<string>("Title");

        var authURL = ZebedeeUtils.BuildAuthorizationURL(apiLoginBaseEndpoint, clientID, responseType, redirectURL, pkce["challenge"]);
        
        responseText.text = authURL;
        
        OpenBrowser(authURL);
    }

    private void OpenBrowser(string URL)
    {
        Application.OpenURL(URL);
    }
    
    private async void ContinueLogin(string url)
    {
        responseText.text = "ContinueLogin: " + url;
        Debug.Log(redirectURL + " " + url);
        if (!url.Contains(redirectURL))
        {
            return;
        }
        
        Debug.Log("cont login " + url);
        var queryString = new Uri(url).Query;
        var parameters = HttpUtility.ParseQueryString(queryString);
        
        var code = parameters.Get("code");
        var state = parameters.Get("state");
        var verifier = PlayerPrefs.GetString("verifier");
        
        //Get access token using the code and verifier, this SHOULD BE DONE on the server!
        responseText.text = "Code: " + code + " Verifier: " + verifier;
        
        var token = await GetOauthAccessToken(code, verifier);
        responseText.text = "Token: " + token;
        var userData = await GetUserData(token);
        responseText.text = "UserData: " + userData;
        
        Debug.Log(userData);

    }

    private async Task<string> GetUserData(string token)
    {
        responseText.text = "GetUserData: " + token;
        var ctx = BeamContext.Default;
        await ctx.OnReady;

        var result = await ctx.Microservices().ZBDMicroservice().GetUserData(token);

       responseText.text = "Result: " + result;
        
        return result;
    }

    private async Task<string> GetOauthAccessToken(string code, string verifier)
    {
        responseText.text = "GetOauthAccessToken: " + code + " " + verifier;
        var ctx = BeamContext.Default;
        await ctx.OnReady;

        responseText.text = "CTX is ready... calling service now...";
        
        var result = await ctx.Microservices().ZBDMicroservice().GetAccessToken(clientID, code, verifier, redirectURL);

        responseText.text = "Result after service call.: " + result;
        
        var jsonObject = JsonConvert.DeserializeObject<Token_Response>(result);
        
        responseText.text = "AccessToken: " + jsonObject.access_token;
        
        return jsonObject.access_token;
    }
    
}
