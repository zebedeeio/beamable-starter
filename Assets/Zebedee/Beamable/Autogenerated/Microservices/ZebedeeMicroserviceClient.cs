//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Beamable.Server.Clients
{
    using System;
    using Beamable.Platform.SDK;
    using Beamable.Server;
    
    
    /// <summary> A generated client for <see cref="Beamable.Microservices.ZebedeeMicroservice"/> </summary
    public sealed class ZebedeeMicroserviceClient : MicroserviceClient, Beamable.Common.IHaveServiceName
    {
        
        public ZebedeeMicroserviceClient(BeamContext context = null) : 
                base(context)
        {
        }
        
        public string ServiceName
        {
            get
            {
                return "ZebedeeMicroservice";
            }
        }
        
        /// <summary>
        /// Call the GetWallet method on the ZebedeeMicroservice microservice
        /// <see cref="Beamable.Microservices.ZebedeeMicroservice.GetWallet"/>
        /// </summary>
        public Beamable.Common.Promise<string> GetWallet()
        {
            string[] serializedFields = new string[0];
            return this.Request<string>("ZebedeeMicroservice", "GetWallet", serializedFields);
        }
        
        /// <summary>
        /// Call the SendPaymentToGamertag method on the ZebedeeMicroservice microservice
        /// <see cref="Beamable.Microservices.ZebedeeMicroservice.SendPaymentToGamertag"/>
        /// </summary>
        public Beamable.Common.Promise<string> SendPaymentToGamertag(string gamertag, string amount, string description)
        {
            string serialized_gamertag = this.SerializeArgument<string>(gamertag);
            string serialized_amount = this.SerializeArgument<string>(amount);
            string serialized_description = this.SerializeArgument<string>(description);
            string[] serializedFields = new string[] {
                    serialized_gamertag,
                    serialized_amount,
                    serialized_description};
            return this.Request<string>("ZebedeeMicroservice", "SendPaymentToGamertag", serializedFields);
        }
        
        /// <summary>
        /// Call the FetchGamertagByUserID method on the ZebedeeMicroservice microservice
        /// <see cref="Beamable.Microservices.ZebedeeMicroservice.FetchGamertagByUserID"/>
        /// </summary>
        public Beamable.Common.Promise<string> FetchGamertagByUserID(string userID)
        {
            string serialized_userID = this.SerializeArgument<string>(userID);
            string[] serializedFields = new string[] {
                    serialized_userID};
            return this.Request<string>("ZebedeeMicroservice", "FetchGamertagByUserID", serializedFields);
        }
        
        /// <summary>
        /// Call the FetchUserIDByGamertag method on the ZebedeeMicroservice microservice
        /// <see cref="Beamable.Microservices.ZebedeeMicroservice.FetchUserIDByGamertag"/>
        /// </summary>
        public Beamable.Common.Promise<string> FetchUserIDByGamertag(string gamertag)
        {
            string serialized_gamertag = this.SerializeArgument<string>(gamertag);
            string[] serializedFields = new string[] {
                    serialized_gamertag};
            return this.Request<string>("ZebedeeMicroservice", "FetchUserIDByGamertag", serializedFields);
        }
        
        /// <summary>
        /// Call the CreateCharge method on the ZebedeeMicroservice microservice
        /// <see cref="Beamable.Microservices.ZebedeeMicroservice.CreateCharge"/>
        /// </summary>
        public Beamable.Common.Promise<string> CreateCharge(string expiresIn, string amount, string description)
        {
            string serialized_expiresIn = this.SerializeArgument<string>(expiresIn);
            string serialized_amount = this.SerializeArgument<string>(amount);
            string serialized_description = this.SerializeArgument<string>(description);
            string[] serializedFields = new string[] {
                    serialized_expiresIn,
                    serialized_amount,
                    serialized_description};
            return this.Request<string>("ZebedeeMicroservice", "CreateCharge", serializedFields);
        }
        
        /// <summary>
        /// Call the GetChargeDetails method on the ZebedeeMicroservice microservice
        /// <see cref="Beamable.Microservices.ZebedeeMicroservice.GetChargeDetails"/>
        /// </summary>
        public Beamable.Common.Promise<string> GetChargeDetails(string chargeId)
        {
            string serialized_chargeId = this.SerializeArgument<string>(chargeId);
            string[] serializedFields = new string[] {
                    serialized_chargeId};
            return this.Request<string>("ZebedeeMicroservice", "GetChargeDetails", serializedFields);
        }
        
        /// <summary>
        /// Call the CreateStaticCharge method on the ZebedeeMicroservice microservice
        /// <see cref="Beamable.Microservices.ZebedeeMicroservice.CreateStaticCharge"/>
        /// </summary>
        public Beamable.Common.Promise<string> CreateStaticCharge(string allowedSlots, string minAmount, string maxAmount, string description, string internalID, string callbackURL, string successMessage)
        {
            string serialized_allowedSlots = this.SerializeArgument<string>(allowedSlots);
            string serialized_minAmount = this.SerializeArgument<string>(minAmount);
            string serialized_maxAmount = this.SerializeArgument<string>(maxAmount);
            string serialized_description = this.SerializeArgument<string>(description);
            string serialized_internalID = this.SerializeArgument<string>(internalID);
            string serialized_callbackURL = this.SerializeArgument<string>(callbackURL);
            string serialized_successMessage = this.SerializeArgument<string>(successMessage);
            string[] serializedFields = new string[] {
                    serialized_allowedSlots,
                    serialized_minAmount,
                    serialized_maxAmount,
                    serialized_description,
                    serialized_internalID,
                    serialized_callbackURL,
                    serialized_successMessage};
            return this.Request<string>("ZebedeeMicroservice", "CreateStaticCharge", serializedFields);
        }
        
        /// <summary>
        /// Call the GetStaticChargeDetails method on the ZebedeeMicroservice microservice
        /// <see cref="Beamable.Microservices.ZebedeeMicroservice.GetStaticChargeDetails"/>
        /// </summary>
        public Beamable.Common.Promise<string> GetStaticChargeDetails(string staticChargeID)
        {
            string serialized_staticChargeID = this.SerializeArgument<string>(staticChargeID);
            string[] serializedFields = new string[] {
                    serialized_staticChargeID};
            return this.Request<string>("ZebedeeMicroservice", "GetStaticChargeDetails", serializedFields);
        }
        
        /// <summary>
        /// Call the PayInvoice method on the ZebedeeMicroservice microservice
        /// <see cref="Beamable.Microservices.ZebedeeMicroservice.PayInvoice"/>
        /// </summary>
        public Beamable.Common.Promise<string> PayInvoice(string description, string internalID, string invoice, string callbackURL, string amount)
        {
            string serialized_description = this.SerializeArgument<string>(description);
            string serialized_internalID = this.SerializeArgument<string>(internalID);
            string serialized_invoice = this.SerializeArgument<string>(invoice);
            string serialized_callbackURL = this.SerializeArgument<string>(callbackURL);
            string serialized_amount = this.SerializeArgument<string>(amount);
            string[] serializedFields = new string[] {
                    serialized_description,
                    serialized_internalID,
                    serialized_invoice,
                    serialized_callbackURL,
                    serialized_amount};
            return this.Request<string>("ZebedeeMicroservice", "PayInvoice", serializedFields);
        }
        
        /// <summary>
        /// Call the GetPaymentDetails method on the ZebedeeMicroservice microservice
        /// <see cref="Beamable.Microservices.ZebedeeMicroservice.GetPaymentDetails"/>
        /// </summary>
        public Beamable.Common.Promise<string> GetPaymentDetails(string paymentId)
        {
            string serialized_paymentId = this.SerializeArgument<string>(paymentId);
            string[] serializedFields = new string[] {
                    serialized_paymentId};
            return this.Request<string>("ZebedeeMicroservice", "GetPaymentDetails", serializedFields);
        }
        
        /// <summary>
        /// Call the SendPaymentToLightningAddress method on the ZebedeeMicroservice microservice
        /// <see cref="Beamable.Microservices.ZebedeeMicroservice.SendPaymentToLightningAddress"/>
        /// </summary>
        public Beamable.Common.Promise<string> SendPaymentToLightningAddress(string lnAddress, string amount, string comment)
        {
            string serialized_lnAddress = this.SerializeArgument<string>(lnAddress);
            string serialized_amount = this.SerializeArgument<string>(amount);
            string serialized_comment = this.SerializeArgument<string>(comment);
            string[] serializedFields = new string[] {
                    serialized_lnAddress,
                    serialized_amount,
                    serialized_comment};
            return this.Request<string>("ZebedeeMicroservice", "SendPaymentToLightningAddress", serializedFields);
        }
        
        /// <summary>
        /// Call the FetchChargeFromLightningAddress method on the ZebedeeMicroservice microservice
        /// <see cref="Beamable.Microservices.ZebedeeMicroservice.FetchChargeFromLightningAddress"/>
        /// </summary>
        public Beamable.Common.Promise<string> FetchChargeFromLightningAddress(string lnAddress, string amount, string description)
        {
            string serialized_lnAddress = this.SerializeArgument<string>(lnAddress);
            string serialized_amount = this.SerializeArgument<string>(amount);
            string serialized_description = this.SerializeArgument<string>(description);
            string[] serializedFields = new string[] {
                    serialized_lnAddress,
                    serialized_amount,
                    serialized_description};
            return this.Request<string>("ZebedeeMicroservice", "FetchChargeFromLightningAddress", serializedFields);
        }
        
        /// <summary>
        /// Call the ValidateLightningAddress method on the ZebedeeMicroservice microservice
        /// <see cref="Beamable.Microservices.ZebedeeMicroservice.ValidateLightningAddress"/>
        /// </summary>
        public Beamable.Common.Promise<string> ValidateLightningAddress(string lnAddress)
        {
            string serialized_lnAddress = this.SerializeArgument<string>(lnAddress);
            string[] serializedFields = new string[] {
                    serialized_lnAddress};
            return this.Request<string>("ZebedeeMicroservice", "ValidateLightningAddress", serializedFields);
        }
        
        /// <summary>
        /// Call the CreateWithdrawalRequest method on the ZebedeeMicroservice microservice
        /// <see cref="Beamable.Microservices.ZebedeeMicroservice.CreateWithdrawalRequest"/>
        /// </summary>
        public Beamable.Common.Promise<string> CreateWithdrawalRequest(string expiresIn, string amount, string description)
        {
            string serialized_expiresIn = this.SerializeArgument<string>(expiresIn);
            string serialized_amount = this.SerializeArgument<string>(amount);
            string serialized_description = this.SerializeArgument<string>(description);
            string[] serializedFields = new string[] {
                    serialized_expiresIn,
                    serialized_amount,
                    serialized_description};
            return this.Request<string>("ZebedeeMicroservice", "CreateWithdrawalRequest", serializedFields);
        }
        
        /// <summary>
        /// Call the GetWithdrawalRequestDetails method on the ZebedeeMicroservice microservice
        /// <see cref="Beamable.Microservices.ZebedeeMicroservice.GetWithdrawalRequestDetails"/>
        /// </summary>
        public Beamable.Common.Promise<string> GetWithdrawalRequestDetails(string withdrawalId)
        {
            string serialized_withdrawalId = this.SerializeArgument<string>(withdrawalId);
            string[] serializedFields = new string[] {
                    serialized_withdrawalId};
            return this.Request<string>("ZebedeeMicroservice", "GetWithdrawalRequestDetails", serializedFields);
        }
        
        /// <summary>
        /// Call the GetBTCUSDExchangeRate method on the ZebedeeMicroservice microservice
        /// <see cref="Beamable.Microservices.ZebedeeMicroservice.GetBTCUSDExchangeRate"/>
        /// </summary>
        public Beamable.Common.Promise<string> GetBTCUSDExchangeRate()
        {
            string[] serializedFields = new string[0];
            return this.Request<string>("ZebedeeMicroservice", "GetBTCUSDExchangeRate", serializedFields);
        }
        
        /// <summary>
        /// Call the GetProductionIPs method on the ZebedeeMicroservice microservice
        /// <see cref="Beamable.Microservices.ZebedeeMicroservice.GetProductionIPs"/>
        /// </summary>
        public Beamable.Common.Promise<string> GetProductionIPs()
        {
            string[] serializedFields = new string[0];
            return this.Request<string>("ZebedeeMicroservice", "GetProductionIPs", serializedFields);
        }
        
        /// <summary>
        /// Call the SupportedRegion method on the ZebedeeMicroservice microservice
        /// <see cref="Beamable.Microservices.ZebedeeMicroservice.SupportedRegion"/>
        /// </summary>
        public Beamable.Common.Promise<string> SupportedRegion(string ip)
        {
            string serialized_ip = this.SerializeArgument<string>(ip);
            string[] serializedFields = new string[] {
                    serialized_ip};
            return this.Request<string>("ZebedeeMicroservice", "SupportedRegion", serializedFields);
        }
        
        /// <summary>
        /// Call the GetAccessToken method on the ZebedeeMicroservice microservice
        /// <see cref="Beamable.Microservices.ZebedeeMicroservice.GetAccessToken"/>
        /// </summary>
        public Beamable.Common.Promise<string> GetAccessToken(string clientID, string code, string codeVerifier, string redirectURL)
        {
            string serialized_clientID = this.SerializeArgument<string>(clientID);
            string serialized_code = this.SerializeArgument<string>(code);
            string serialized_codeVerifier = this.SerializeArgument<string>(codeVerifier);
            string serialized_redirectURL = this.SerializeArgument<string>(redirectURL);
            string[] serializedFields = new string[] {
                    serialized_clientID,
                    serialized_code,
                    serialized_codeVerifier,
                    serialized_redirectURL};
            return this.Request<string>("ZebedeeMicroservice", "GetAccessToken", serializedFields);
        }
        
        /// <summary>
        /// Call the RefreshAccessToken method on the ZebedeeMicroservice microservice
        /// <see cref="Beamable.Microservices.ZebedeeMicroservice.RefreshAccessToken"/>
        /// </summary>
        public Beamable.Common.Promise<string> RefreshAccessToken(string clientID, string refreshToken, string redirectURL)
        {
            string serialized_clientID = this.SerializeArgument<string>(clientID);
            string serialized_refreshToken = this.SerializeArgument<string>(refreshToken);
            string serialized_redirectURL = this.SerializeArgument<string>(redirectURL);
            string[] serializedFields = new string[] {
                    serialized_clientID,
                    serialized_refreshToken,
                    serialized_redirectURL};
            return this.Request<string>("ZebedeeMicroservice", "RefreshAccessToken", serializedFields);
        }
        
        /// <summary>
        /// Call the GetUserData method on the ZebedeeMicroservice microservice
        /// <see cref="Beamable.Microservices.ZebedeeMicroservice.GetUserData"/>
        /// </summary>
        public Beamable.Common.Promise<string> GetUserData(string userToken)
        {
            string serialized_userToken = this.SerializeArgument<string>(userToken);
            string[] serializedFields = new string[] {
                    serialized_userToken};
            return this.Request<string>("ZebedeeMicroservice", "GetUserData", serializedFields);
        }
        
        /// <summary>
        /// Call the InitiateInternalTransfer method on the ZebedeeMicroservice microservice
        /// <see cref="Beamable.Microservices.ZebedeeMicroservice.InitiateInternalTransfer"/>
        /// </summary>
        public Beamable.Common.Promise<string> InitiateInternalTransfer(string amount, string receiverWallet)
        {
            string serialized_amount = this.SerializeArgument<string>(amount);
            string serialized_receiverWallet = this.SerializeArgument<string>(receiverWallet);
            string[] serializedFields = new string[] {
                    serialized_amount,
                    serialized_receiverWallet};
            return this.Request<string>("ZebedeeMicroservice", "InitiateInternalTransfer", serializedFields);
        }
    }
    
    internal sealed class MicroserviceParametersZebedeeMicroserviceClient
    {
        
        [System.SerializableAttribute()]
        internal sealed class ParameterSystem_String : MicroserviceClientDataWrapper<string>
        {
        }
    }
    
    [BeamContextSystemAttribute()]
    public static class ExtensionsForZebedeeMicroserviceClient
    {
        
        [Beamable.Common.Dependencies.RegisterBeamableDependenciesAttribute()]
        public static void RegisterService(Beamable.Common.Dependencies.IDependencyBuilder builder)
        {
            builder.AddScoped<ZebedeeMicroserviceClient>();
        }
        
        public static ZebedeeMicroserviceClient ZebedeeMicroservice(this Beamable.Server.MicroserviceClients clients)
        {
            return clients.GetClient<ZebedeeMicroserviceClient>();
        }
    }
}
